#!/usr/bin/cmake -P

#
# Headless script to generate git versioning with only cmake installed
#

# the output version filename relative to the PWD of the script
set(VERSION_FILENAME "Version.h")

find_package(Git REQUIRED)

# execute all the things we need
execute_process(COMMAND ${GIT_EXECUTABLE} describe --tags --always HEAD OUTPUT_VARIABLE GIT_TAG OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD OUTPUT_VARIABLE GIT_COMMIT OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD OUTPUT_VARIABLE GIT_BRANCH OUTPUT_STRIP_TRAILING_WHITESPACE)

file(WRITE ${VERSION_FILENAME}  "")
file(APPEND ${VERSION_FILENAME} "#ifndef ELFLDR_VERSION_H\n")
file(APPEND ${VERSION_FILENAME} "#define ELFLDR_VERSION_H\n")
file(APPEND ${VERSION_FILENAME} "//\n")
file(APPEND ${VERSION_FILENAME} "// Do not edit!\n")
file(APPEND ${VERSION_FILENAME} "// This file is auto generated by GitTag.cmake.\n")
file(APPEND ${VERSION_FILENAME} "//\n")
file(APPEND ${VERSION_FILENAME} "\n")
file(APPEND ${VERSION_FILENAME} "#ifndef RC_INVOKED /* Win32 RC cannot understand C++14, because it sucks :( */\n")
file(APPEND ${VERSION_FILENAME} "namespace elfldr::version {\n")

if("${GIT_BRANCH}" STREQUAL "master")
    # master/stable releases
    file(APPEND ${VERSION_FILENAME} "\tconstexpr static char tag[] = \"${GIT_TAG}\";\n")
else()
    if("${GIT_TAG}" STREQUAL "${GIT_COMMIT}")
        # git describe --always will fallback to shorthand commit if no tags can describe this version
        file(APPEND ${VERSION_FILENAME} "\tconstexpr static char tag[] = \"${GIT_TAG}-${GIT_BRANCH}\";\n")
    else()
        # we actually have a tag, so do this instead
        file(APPEND ${VERSION_FILENAME} "\tconstexpr static char tag[] = \"${GIT_TAG}-${GIT_COMMIT}-${GIT_BRANCH}\";\n")
    endif()
endif()

file(APPEND ${VERSION_FILENAME} "\tconstexpr static char branch[] = \"${GIT_BRANCH}\";")
file(APPEND ${VERSION_FILENAME} "\n}\n")
file(APPEND ${VERSION_FILENAME} "#endif\n")

file(APPEND ${VERSION_FILENAME} "// Legacy macros for stamping Windows binaries\n")
file(APPEND ${VERSION_FILENAME} "// with the Git tag/commit/branch in their version manifest, or basic string literal concatenation.\n")

if("${GIT_BRANCH}" STREQUAL "master")
    file(APPEND ${VERSION_FILENAME} "\t#define ELFLDR_VERSION_TAG \"${GIT_TAG}\"\n")
else()
    if("${GIT_TAG}" STREQUAL "${GIT_COMMIT}")
        # git describe --tags will fallback to shorthand commit if no tags can describe this version
        file(APPEND ${VERSION_FILENAME} "\t#define ELFLDR_VERSION_TAG \"${GIT_TAG}-${GIT_BRANCH}\"\n")
    else()
        # we actually have a tag, so do this instead
        file(APPEND ${VERSION_FILENAME} "\t#define ELFLDR_VERSION_TAG \"${GIT_TAG}-${GIT_COMMIT}-${GIT_BRANCH}\"\n")
    endif()
endif()
file(APPEND ${VERSION_FILENAME} "\t#define ELFLDR_VERSION_BRANCH \"${GIT_BRANCH}\"\n")
file(APPEND ${VERSION_FILENAME} "#endif // ELFLDR_VERSION_H\n")

if("${GIT_TAG}" STREQUAL "${GIT_COMMIT}")
    message(STATUS "Generated ${VERSION_FILENAME} for commit ${GIT_COMMIT} on branch ${GIT_BRANCH}.")
else()
    message(STATUS "Generated ${VERSION_FILENAME} for commit ${GIT_COMMIT} on tag ${GIT_TAG} on branch ${GIT_BRANCH}.")
endif()